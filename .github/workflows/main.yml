name: Deploy to EC2
run-name: '${{ github.actor }} deploy to EC2'
on: [push]
jobs:
  Clean-Up-Previous-Build:
    environment: production
    runs-on: self-hosted
    steps:
      - run: echo "ðŸ§¹ Cleanup previous build"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup SSH Tunnel
        uses: actions/checkout@v4
      - run: echo "${{secrets.AWS_SSH_PRIVATE_KEY}}" > personal_blog.pem && chmod 600 personal_blog.pem
      - run: ssh -o StrictHostKeyChecking=no -i personal_blog.pem ${{secrets.AWS_EC2_USERNAME}}@${{secrets.AWS_EC2_ENDPOINT}}

      - name: Clean previous images
        run: |
          sudo docker system prune -f --volumes
      
      - name: Clean workspace
        run: |
          cd ~/Projects
          rm -rf personal-blog

  Build-On-AWS-CodeBuidld:
    environment: production
    runs-on: codebuild-personal_blog-${{ github.run_id }}-${{ github.run_attempt }}
    needs: Clean-Up-Previous-Build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Build on AWS CodeBuild
        uses: aws-actions/aws-codebuild-run-build@v1
        with:
          project-name: personal_blog
          
  AWS_EC2:
    environment: production
    runs-on: self-hosted
    needs: Build-On-AWS-CodeBuidld
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: SSH to EC2 instances
        uses: actions/checkout@v4
      - run: echo "${{secrets.AWS_SSH_PRIVATE_KEY}}" > personal_blog.pem && chmod 600 personal_blog.pem
      - run: ssh -o StrictHostKeyChecking=no -i personal_blog.pem ${{secrets.AWS_EC2_USERNAME}}@${{secrets.AWS_EC2_ENDPOINT}}

      - name: Verify persmission
        run: whoami && pwd

      - name: Fetch required parameters
        run: |
          PS_ACCESS_KEY_ID=$(echo $(aws ssm get-parameter --name CONFIG_AWS_ACCESS_KEY_ID --output json) | jq -r '.Parameter.Value')
          PS_SECRET_KEY_ID=$(echo $(aws ssm get-parameter --name CONFIG_AWS_SECRET_KEY_ID --output json) | jq -r '.Parameter.Value')
          export CONFIG_AWS_ACCESS_KEY_ID=$PS_ACCESS_KEY_ID
          export CONFIG_AWS_SECRET_KEY_ID=$PS_SECRET_KEY_ID
          echo $CONFIG_AWS_ACCESS_KEY_ID
          echo $CONFIG_AWS_SECRET_KEY_ID

      - name: Install new build
        run: |
          export BUN_INSTALL="$HOME/.bun"
          export PATH="$BUN_INSTALL/bin:$PATH"
          cd /home/ubuntu/Projects
          mkdir personal-blog
          aws s3api get-object --bucket ${{secrets.AWS_S3_BUCKET}} --key source_code ~/Projects/personal-blog/build
          cd ~/Projects/personal-blog
          unzip -o build
          rm -rf build
          bun install

      - name: Create environment
        run: |
          cd ~/Projects/personal-blog
          >.env
          chmod +x scripts/load_env.sh
          scripts/load_env.sh
      
      - name: Build container
        run: |
          export BUN_INSTALL="$HOME/.bun"
          export PATH="$BUN_INSTALL/bin:$PATH"
          cd ~/Projects/personal-blog
          bun run container
      - name: Cleanup
        run: docker system prune -f --volumes
